# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: To-do application

on:
  #push:
  #  branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  deployment:
    permissions:
      contents: read
      id-token: write

    runs-on: ubuntu-latest

    services:
      test_db:
        image: postgres:13-bullseye
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER || 'test_user' }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD || 'test_password' }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB || 'test_db' }}
          PGPORT: 5433
        options: >- 
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --name pg_test_db
        ports:
          - 5433:5433

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
    - name: Installing Poetry
      uses: abatilo/actions-poetry@v2
      with:
          poetry-version: "latest"
    - name: Installing Dependencies      
      working-directory: ./todo-list-app
      run: poetry install
      
    - name: Linting with pylint
      working-directory: ./todo-list-app
      run: poetry run pylint *.py **/*.py
        
    - name: Running alembic migrations
      working-directory: ./todo-list-app
      run: poetry run alembic upgrade head 

    - name: Getting .env file from secrets
      run: |
        cat <<EOF > .env
        ${{ secrets.ENV_FILE }}
        EOF
      
    - name: Testing with pytest
      working-directory: ./todo-list-app
      run: poetry run pytest -v

    - name: Installing openconnect
      if: ${{ vars.VPN_REQUIRED == 'true' }}
      run: sudo apt install openconnect -y

    - name: Getting auth token
      if: ${{ vars.VPN_REQUIRED == 'true' }}
      uses: step-security/wait-for-secrets@v1
      id: get-token
      with:
        secrets: |
          VPN_AUTH:
            name: "VPN cookie"
            description: "Can be generated by running: sudo openconnect --cookieonly -u $USER $VPN_SERVER"

    - name: Connecting to VPN 
      if: ${{ vars.VPN_REQUIRED == 'true' }}
      run: sudo openconnect --background --cookie="${{ steps.get-token.outputs.VPN_AUTH }}" ${{ secrets.VPN_SERVER }}

    - name: Setting up terraform.tfvars file
      working-directory: ./terraform
      run: |
        cat <<EOF > terraform.tfvars
        ${{ secrets.TERRAFORM_VARIABLES }}
        EOF
      
    - uses: hashicorp/setup-terraform@v3
    - name: Terraform Init
      working-directory: ./terraform
      run: terraform init
      
    - name: Terraform Plan and removing old instances
      working-directory: ./terraform
      id: plan
      run: |
        terraform refresh
        terraform destroy --auto-approve
        terraform plan -no-color
      continue-on-error: true
    
    - name: Terraform Apply
      working-directory: ./terraform
      run: terraform apply --auto-approve 

    - name: Setting up ansible
      working-directory: ./ansible
      run: |
        cat <<EOF > ansible_key
        ${{ secrets.SSH_PRIVATE_KEY }}
        EOF
        chmod 600 ansible_key
        sudo apt install software-properties-common -y
        sudo add-apt-repository --yes --update ppa:ansible/ansible
        sudo apt install ansible -y

    - name: Making sure ansible can access the host
      working-directory: ./ansible
      run: |
        for i in {1..10}; do
          if ansible -m ping -i inventory --extra-vars ansible_ssh_private_key_file=ansible_key servers; then
              echo "Connection successful"
              break
          fi
          echo "Unable to connect this time"
          sleep 10
        done

    - name: Set variables for repo URL and branch
      run: |
        echo "REPO_URL=https://github.com/${{ github.repository }}.git" >> $GITHUB_ENV
        echo "GITHUB_REF=${{ github.ref }}" >> $GITHUB_ENV
        echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV

    - name: Running playbook
      working-directory: ./ansible
      run: |
        ansible-galaxy install -r ./requirements.yaml
        ansible-playbook deploy.yml --inventory inventory --extra-vars ansible_ssh_private_key_file=ansible_key
